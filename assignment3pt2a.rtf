{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh14960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #lang racket\
; Assignment 3 Part 2 a\
;Connor McGarvey\
\
\
(define (delete-atom list atom);define a function that deletes all occurrences of a passed atom from a passed list\
  (cond ((null? list); first condition check, if list is empty/null\
         '()); if empty return expty list ()\
        ((list? (car list)); Second condition check checks to see if list by passing first element of the list\
         (cons (delete-atom (car list) atom) (delete-atom (cdr list) atom)));cons two recursive calls delete the atom from the list\
        ((equal? (car list) atom );Thired condition check, if first element of remaining list is equal to the atom then atom is found\
         (delete-atom (cdr list) atom ));recursive call to delete the atom by passing the remaining elements of the list\
        (else\
         (cons (car list) (delete-atom (cdr list) atom)))));Final catch all: cons the first atom of the list to a recursive call to delete to traverse through the rest of the list\
\
; driver calls delete-atom function, gives the list as first parameter and the atom as second parameter\
     \
(delete-atom '(1 2 3) 1)\
(delete-atom '(a b c d e a b a d e) 'a)\
(delete-atom '(a b c d a c a a) 'a)\
(delete-atom '((a b) c () d a c a a) 'a)\
(delete-atom '((a b c) () () (c) (c(c))) 'a)\
(delete-atom '(1 2 3 5 -99 2 4 2 2 3 4 21 2321 42) 2)\
(delete-atom '(a b c d e a b a d e) 'c)\
(delete-atom '(a b c d a c a a) 'c)\
(delete-atom '((a b) c () d a c a a) 'c)\
(delete-atom '((a b c) () () (c) (c(c))) 'c)}