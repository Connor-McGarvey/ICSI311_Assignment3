{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
#lang racket\
\
;Assignment 3 pt 3\
;Connor McGarvey\
\
(define (bubble-sort x gt?); definition of function bubble-sort takes list parameter : function will sort all emelemnts of the given list in order of least to greatest value\
(letrec; recursive let statement\
((fix (lambda (first second); lambda function called fix that has two parameters used with bubble-sort-iteration function below\
(if (equal? second (first second)); checks if first and second are equal\
second ; then returns second\
(fix first (first second)))));else do this... recursive call to fix function, passes first to first parameter and (first second) as the second parameter\
\
(bubble-sort-iteration (lambda (list) ; fucntion called bubble-sort-iteration takes lambda and list as parameters this function will be recursively called for each iterative step of the bubble sort algorithm\
(if (or (null? list) (null? (cdr list))) ; condition check, if list is null or if the remaining elements after the first element are null\
list; then returns list\
(if (gt? (car list) (cadr list)); condition check if the first element of the list is greater than the later elements of the list\
(cons (cadr list) (bubble-sort-iteration (cons (car list) (cddr list)))) ; then do this ... cons remaining elemnts of the list to the bubble-sort-iteration function : cons first element of the list and the remaining elements of the list\
(cons (car list) (bubble-sort-iteration (cdr list)))))))) ; else do this... cons the first element of the list and function call to bubble sort iteration being passed the remaining elements of the list\
\
(fix bubble-sort-iteration x))); call to fix function being passed bubble-sort-iteration that is being passed list x\
  \
;Driver Below : Display the unsorted list : new line : display sotred list : double new line : repeats for 10 different randomly generated lists\
\
(display (list 435 885 76 206 236 314 922 443 561 519))\
(newline)\
(display(bubble-sort (list 435 885 76 206 236 314 922 443 561 519) >))\
(newline)\
(newline)\
\
(display (list 4879 3301 8121 2440 2903 5385 469 5098 4557 3514))\
(newline)\
(display(bubble-sort (list 4879 3301 8121 2440 2903 5385 469 5098 4557 3514) >))\
(newline)\
(newline)\
\
(display (list 9 75 105 217 896 994 279 610 271 65))\
(newline)\
(display(bubble-sort (list 9 75 105 217 896 994 279 610 271 65) >))\
(newline)\
(newline)\
\
(display (list 314 863 608 369 626 178 630 894 522 842))\
(newline)\
(display(bubble-sort (list 314 863 608 369 626 178 630 894 522 842) >))\
(newline)\
(newline)\
\
(display (list 435 885 76 206 236 314 922 443 561 519))\
(newline)\
(display(bubble-sort (list 435 885 76 206 236 314 922 443 561 519) >))\
(newline)\
(newline)\
\
(display (list 449 631 511 518 200 165 790 2 912 570))\
(newline)\
(display(bubble-sort (list 449 631 511 518 200 165 790 2 912 570) >))\
(newline)\
(newline)\
\
(display (list -483 385 919 342 292 387 -679 957 -642 820))\
(newline)\
(display(bubble-sort (list -483 385 919 342 292 387 -679 957 -642 820) >))\
(newline)\
(newline)\
\
(display (list -450 -69 720 -358 343 -224 126 448 416 962))\
(newline)\
(display(bubble-sort (list -450 -69 720 -358 343 -224 126 448 416 962) >))\
(newline)\
(newline)\
\
(display (list 246 598 27 754 -390 -7 639 -85 343 -77 280 -495 477 -939 -118 219 -94 930 874 -689))\
(newline)\
(display(bubble-sort (list 246 598 27 754 -390 -7 639 -85 343 -77 280 -495 477 -939 -118 219 -94 930 874 -689) >))\
(newline)\
(newline)\
\
(display (list 322 323 167 642 166 -628 -869 -465 -932 199 189 542 -158 -424 -796 -372 427 697 -526 742))\
(newline)\
(display(bubble-sort (list 322 323 167 642 166 -628 -869 -465 -932 199 189 542 -158 -424 -796 -372 427 697 -526 742) >))}